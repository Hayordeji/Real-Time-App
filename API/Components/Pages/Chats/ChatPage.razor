@page "/chat" 
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Http.Connections
@using Microsoft.AspNetCore.SignalR.Client
<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        background-color: #f5f5f5;
        height: 100vh;
        overflow: hidden;
    }

    /* Glass card styling */
    .glass-card {
        height: 100vh;
        display: flex;
        flex-direction: column;
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.3);
    }

    .glass-card-primary {
        background: linear-gradient(135deg, rgba(102, 126, 234, 0.15), rgba(118, 75, 162, 0.15));
    }

    .text-center {
        text-align: center;
    }

    .page-title {
        font-size: 24px;
        font-weight: 600;
        color: #ffffff;
        padding: 20px;
    }

    .mb-xl {
        margin-bottom: 20px;
    }

    .top-bar {
        height: 4px;
        background: linear-gradient(90deg, #007bff, #0056b3);
        margin: 0 20px 20px;
        border-radius: 2px;
    }

    .message-container {
        flex: 1;
        display: flex;
        flex-direction: column;
        position: relative;
        overflow: hidden;
    }

    .messages {
        flex: 1;
        overflow-y: auto;
        padding: 0 20px;
        margin-bottom: 80px; /* Space for fixed input */
        scroll-behavior: smooth;
    }

    .message {
        background: rgba(255, 255, 255, 0.8);
        border: 1px solid rgba(0, 0, 0, 0.1);
        border-radius: 12px;
        padding: 12px 16px;
        margin-bottom: 12px;
        text-align: left;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        transition: transform 0.2s ease;
    }

        .message:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

    /* Fixed message form styles */
    .message-form-input {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        background: white;
        border-top: 1px solid #e0e0e0;
        padding: 16px 20px;
        display: flex;
        gap: 12px;
        align-items: center;
        box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
        z-index: 1000;
    }

        .message-form-input input {
            flex: 1;
            padding: 12px 16px;
            border: 1px solid #d0d0d0;
            border-radius: 24px;
            font-size: 16px;
            outline: none;
            transition: border-color 0.2s ease;
            background: #f8f9fa;
        }

            .message-form-input input:focus {
                border-color: #007bff;
                background: white;
            }

            .message-form-input input::placeholder {
                color: #888;
            }

    .btn-secondary {
        padding: 12px 24px;
        background: #007bff;
        color: white;
        border: none;
        border-radius: 20px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        min-width: 80px;
    }

        .btn-secondary:hover:not(:disabled) {
            background: #0056b3;
            transform: translateY(-1px);
        }

        .btn-secondary:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
        }

    /* Responsive design */

    .message-form-input
    {
        padding: 12px 16px;
    }
    
    .message-form-input input {
        font-size: 16px; /* Prevents zoom on iOS */
    }

    .btn-secondary {
        padding: 10px 20px;
        min-width: 70px;
    }

</style>
<body>
    <div class="glass-card glass-card-primary text-center" role="main" aria-label="Group A Chat">
        <div class="page-title mb-xl">Private chat</div>
        <div class="top-bar"></div>
        <div class="message-container">
            <div class="messages" aria-live="polite" aria-relevant="additions" role="log" tabindex="0">
                @foreach (var msg in messages)
                {
                    <div class="message" role="article" aria-label="Chat message">@msg</div>
                }
            </div>

            <div class="message-form-input">
                <input @bind="message" @bind:event="oninput" placeholder="Message" aria-label="Type a message" autocomplete="off" />
                <button class="btn-secondary" aria-label="Send Message" @onclick="SendMessage" disabled="@string.IsNullOrWhiteSpace(message)"> Send </button>
            </div>
        </div>

    </div>
</body>

@code{
    // private string user = string.Empty;
    private string message = string.Empty;
    private List<string> messages = new List<string>();
    private HubConnection? hubConnection;

    [Inject]
    private IJSRuntime? _js { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/ChatHub"), options =>{
                options.Transports = HttpTransportType.WebSockets;
                options.AccessTokenProvider = async () =>
                {
                    var token = await _js.InvokeAsync<string>("localStorage.getItem", "jwt_token");
                    return token;
                };
                // options.Headers.Add("Authorization", $"Bearer {token}");
            })
            .WithAutomaticReconnect()
            .AddMessagePackProtocol()
            .Build();

        //STARTS THE CONNECTION
        await hubConnection.StartAsync();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.Reconnecting += async (error) =>
        {
            messages.Add("Attempting to reconnect...");
            await Task.Delay(500);

            try
            {
                //START THE CONNECTION AGAIN
                //await hubConnection.StartAsync();

            }
            catch (Exception ex)
            {
                Console.WriteLine("Reconnect failed: " + ex.Message);

            }
            await InvokeAsync(StateHasChanged);
        };

        hubConnection.Reconnected += (connectionId) =>
        {
            messages.Add("Reconnected successfully!");
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };

        hubConnection.Closed += async (error) =>
        {

        };





    }


    // This method is called when the user clicks the "Send" button
    private async Task SendMessage()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendPersonalMessage", message);
            message = string.Empty;
            await InvokeAsync(StateHasChanged);
        }
    }

    // This method is called when the component is disposed
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    // This method is called when the user clicks the "Start" button
    private async Task StartConnection()
    {
        if (hubConnection?.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }
    }

    // / This method is called when the user clicks the "Stop" button
    private async Task StopConnection()
    {
        if (hubConnection?.State == HubConnectionState.Connected)
        {
            await hubConnection.StopAsync();
            //TEST IF ADDING THE MESSAGE AT THE TOP WILL STILL WORK
            messages.Add("Disconnected!");
        }
    }

    private async Task JoinGroup()
    {
        await hubConnection.SendAsync("JoinGroup", "Group A");
    }
    private async Task LeaveGroup()
    {
        await hubConnection.SendAsync("LeaveGroup", "Group A");
    }
}

